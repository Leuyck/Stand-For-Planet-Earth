<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero1_stand</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize some variables

dir = 0;
spd= 10;
hspd = 0;
vspd = 0;
state = "standing";
jumping = false;
fire1 = false;
//fire2 = false;
//fire3 = false;
fric = 1.3;
walkingAcc = 5;
walkingMaxSpd = spd/3;
runningAcc = 5;
runningMaxSpd = spd;
shot1_delay = 5; //Cadence de tir
heal_delay = 1; // Cadence de heal
vari = 3; // précision
bulletDirection = 0 //direction de la balle a sa création
alarm [0] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the hero tracker


instance_create (x,y,obj_localPlayer_tracker);





/*shotgun_offset_x = 15;
shotgun_offset_y = 15;

xpos = x + lengthdir_x(shotgun_offset_x, 15); // or direction
ypos = y + lengthdir_y(shotgun_offset_y, 15);

instance_create(xpos, ypos, obj_shotgun);


/*draw_sprite_ext(spr_shotgun, -1, x, y, 1, 1, dir-90, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bullet Delay Alarm
alarm[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.typing)
{
    scr_detectKey();
    scr_fireCheck(obj_localPlayer, obj_bullet3);
    //scr_jumpCheck();
    scr_aimHero();
    scr_moveAndCollision();
    scr_standCheck();
    scr_setSprites();
    
    var spriteNumber =0;
    switch (sprite_index)
    {
        case spr_hero1_stand :
            spriteNumber = 1
        break;
        
        case spr_hero1_move :
            spriteNumber = 2
        break;
        
        case spr_hero1_shot :
            spriteNumber = 3
        break;
        
        case spr_hero1_reload :
            spriteNumber = 4
        break;
        
        case spr_hero1_melee_attack :
            spriteNumber = 5
        break;
    }
    
    //update coordinates
    
    buffer_seek (global.bufferNetwork , buffer_seek_start, 0);
    buffer_write(global.bufferNetwork, buffer_u8, 7);
    buffer_write(global.bufferNetwork, buffer_u32, global.playerId);
    buffer_write(global.bufferNetwork, buffer_f32, x);
    buffer_write(global.bufferNetwork, buffer_f32, y);
    buffer_write(global.bufferNetwork, buffer_u8, spriteNumber);
    buffer_write(global.bufferNetwork, buffer_u8, image_index);
    buffer_write(global.bufferNetwork, buffer_u16, dir);
    network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));
    
    //update state
    
    buffer_seek (global.bufferNetwork , buffer_seek_start, 0);
    buffer_write(global.bufferNetwork, buffer_u8, 9);
    buffer_write(global.bufferNetwork, buffer_u32, global.playerId);
    buffer_write(global.bufferNetwork, buffer_string, state);
    buffer_write(global.bufferNetwork, buffer_u32, shot1_delay);
    buffer_write(global.bufferNetwork, buffer_u32, bulletDirection);
    network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));
    
    




}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// tell the server we're leaving the game room

buffer_seek (global.bufferNetwork, buffer_seek_start, 0);
buffer_write (global.bufferNetwork, buffer_u8, 6);
buffer_write (global.bufferNetwork, buffer_string, global.playerPseudo);
buffer_write (global.bufferNetwork, buffer_u32, global.playerId);
buffer_write (global.bufferNetwork, buffer_u8, 0); // when we go to the main, send a 0
network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));

buffer_seek (global.bufferNetwork, buffer_seek_start, 0);
buffer_write (global.bufferNetwork, buffer_u8, 10);
buffer_write (global.bufferNetwork, buffer_u8, 0);
network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));



room_goto (rm_go);
/*with (obj_client)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
