<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero1_stand</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize some variables

playerId = noone;                   // Id du hero
playerName = "";                    // Nom du hero
state = "standing";                 // Etat permettant de choisir les sprites et l'image speed
depth = -100;

// MOVE
walkingMaxSpd = 10;                 // Vitesse de déplacement max

// WEAPON
fire1 = false;   
fire2 = false;                      // Indique si l'on tire avec l'arme 1
shot1_delay = 5;                    // Cadence de tir
shot1_bullet_count = 1;             // Nombre de balles
shot1_bullet_type = obj_bullet3;    // Type de balle
precision = 3;                      // Précision de tir
cooldownFire2 = 0
energyCostForFire2 = 100            // cout d'utilisation de fire2

// DASH
dashing = false;
dashTime = 0.5;                     // durée de dash
dashSpeed = 2 * walkingMaxSpd       // Vitesse de déplacement pendant le dash             
dashNumber = 2;                     // Nombre de dash possible d'affilée
dashCooldown = 2;                   // Temps d'attente avant d'obtenir un nouveau dash

// HEALTH
maxHealth = 100
currentHealth = maxHealth;
healthRegen = 0;                    // Regénération par seconde
currentHealthRegen = healthRegen;

// ENERGY
maxEnergy = 100;                    // Max énergie défaut
currentMaxEnergy = maxEnergy;       // Max énergie courante
currentEnergy = maxEnergy
energyRegen = 5;                    // Regénération par seconde
currentEnergyRegen = energyRegen;

// LINK
linkTarget = noone;                 // Lien de la cible à lier
internalLinkColor = c_red;          // Couleur du lien interne
externalLinkColor = c_aqua;         // Couleur du lien externe
internalLinkRatio = 0.3;            // Ratio de couleur interne par rapport à l'externe (0=&gt;1)
linkDistanceMin = 100;              // Distance minimum du lien pour la puissance max
linkDistanceMax = 500;              // Distance maximum à partir de la quelle le lien casse.
linkPower = 1;                      // Puissance du lien (0=&gt;1)
linkWeightMin = 5;                  // Epaisseur du lien à puissance minimum.
linkWeightMax = 13;                 // Epaisseur du lien à puissance maximale.
maxLinkDuration = 7;                // Durée maximale du lien.
linkEnergyDegen = -100/7;           // Dimunition d'énergie par seconde si lié.
linkedHeros = ds_list_create();     // liste des héros liés à nous meme (qui nous boostent)
overChargedDegen = -50;             // Diminution d'énergie par seconde si surchage d'énergie (currentEnergy &gt; currentMaxEnergy)

// ALARMs
alarm [0] = 0;                      // Timer to delay bullets
alarm [1] = 1;                      // Timer to send coordinates to server
alarm [2] = 0;                      // Timer of dash cooldown
alarm [3] = 0;                      // durée du dash
alarm [5] = 0.5 * room_speed;       // Regénération
                
alarm [7] = -1 ;                    // compte a rebours du fire2

// Data structures
sprites = ds_map_create();
imageSpeeds = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_dashBar)
{
    instance_destroy ();
}
with(obj_healthBar)
{
    if (self.hero == other.id)
    {
        instance_destroy ();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Compte a rebours du fire2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process life regen and energy regen
var refreshTime = 0.1;

if(self.playerId == global.playerId)
{
    if(currentHealth &lt;= maxHealth) {
        currentHealth += min(maxHealth, currentHealthRegen * refreshTime);
    }
    
    if(currentEnergyRegen &gt; 0 &amp;&amp; currentEnergy &lt; currentMaxEnergy)
    {
        currentEnergy += currentEnergyRegen * refreshTime;
        if(currentEnergy &gt; currentMaxEnergy) 
        {
            currentEnergy = currentMaxEnergy;
        }
    }
    
    if(currentEnergyRegen &lt; 0 &amp;&amp; currentEnergy &gt; 0)
    {
        currentEnergy += currentEnergyRegen * refreshTime;
        if(currentEnergy &lt; 0) 
        {
            currentEnergy = 0;
        }
    }
}
alarm[5] = refreshTime * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///durée du dash

speed = 0
dashing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dash recuperation delay alarm

if (dashNumber &lt; 2)
{
    dashNumber++
    alarm[2] = dashCooldown * room_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// send coordinates to server
if(global.playerId == self.playerId)
{
    buffer_seek (global.bufferNetwork , buffer_seek_start, 0);
    buffer_write(global.bufferNetwork, buffer_u8, S_PLAYER_COORDINATES_UPDATED_MESSAGE);
    buffer_write(global.bufferNetwork, buffer_u32, global.playerId);
    buffer_write(global.bufferNetwork, buffer_f32, x);
    buffer_write(global.bufferNetwork, buffer_f32, y);
    buffer_write(global.bufferNetwork, buffer_u32, sprite_index);
    buffer_write(global.bufferNetwork, buffer_u8, image_index);
    buffer_write(global.bufferNetwork, buffer_f32, image_angle);
    buffer_write(global.bufferNetwork, buffer_f32, direction);
    buffer_write(global.bufferNetwork, buffer_u32, currentHealth);
    buffer_write(global.bufferNetwork, buffer_u32, currentEnergy);
    buffer_write(global.bufferNetwork, buffer_u32, currentMaxEnergy);
    network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));
}
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bullet Delay Alarm
alarm[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Lumière
if (instance_exists (obj_engine))
{
    SL_draw_sprite_light(spr_light,0,300,20,1,1,0,c_green,0.8);
}
if (global.playerId == self.playerId)
{
    if (instance_exists(obj_chatTyping) &amp;&amp; obj_chatTyping.isTyping == false)
    {
        scr_detectKey();
        scr_dashCheck()
        scr_fireCheck();
        scr_aimHero();
        scr_moveAndCollision();
        scr_standCheck();
        scr_pressButtonCheck(obj_button);
        scr_setSprites();
        scr_updateLinkEnergyState();
    }
}
scr_updateLinkState();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet_base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.owner == "ennemi")
{
    with(other)
    {
        instance_destroy();
    }
    if (currentHealth &gt; 0)
        then currentHealth -= other.damage;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (global.playerId != self.playerId)
{
    draw_set_font (fnt_3);
    draw_set_colour (c_red);
    
    draw_text (x, y-25, string(playerId));
    draw_text (x, y-50, string(playerName));
}

if(linkTarget != noone)
{
    var weight = linkWeightMin + (linkWeightMax - linkWeightMin) * linkPower;

    var alpha = draw_get_alpha();
    draw_set_alpha(0.8);
    draw_set_color(externalLinkColor);
    draw_line_width(x, y, linkTarget.x, linkTarget.y, weight);
    draw_set_color(internalLinkColor);
    draw_line_width(x, y, linkTarget.x, linkTarget.y, weight * internalLinkRatio);
    draw_set_alpha(alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.playerId == self.playerId)
{
    with(obj_turret_hero3)
    {
        instance_destroy();
    }
    instance_destroy();
    scr_closeConnectionToServer();
    scr_transitionMapTo(rm_mainMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle the link

if(playerId == global.playerId)
{
    if(linkTarget == noone)
    {
        var targetAtMouse = instance_place(mouse_x, mouse_y, obj_localPlayer);
        if(targetAtMouse != noone &amp;&amp; targetAtMouse != self)
        {
            linkTarget = targetAtMouse;
            
            buffer_seek (global.bufferNetwork, buffer_seek_start, 0);
            buffer_write(global.bufferNetwork, buffer_u8, S_BROADCAST_HEROS_LINKED);
            buffer_write(global.bufferNetwork, buffer_u8, global.playerId);
            buffer_write(global.bufferNetwork, buffer_u8, linkTarget.playerId);
            network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));
        }
    }
    else
    {
        buffer_seek (global.bufferNetwork, buffer_seek_start, 0);
        buffer_write(global.bufferNetwork, buffer_u8, S_BROADCAST_HEROS_UNLINKED);
        buffer_write(global.bufferNetwork, buffer_u8, global.playerId);
        buffer_write(global.bufferNetwork, buffer_u8, linkTarget.playerId);
        network_send_packet (obj_client.socket, global.bufferNetwork, buffer_tell(global.bufferNetwork));
        
        linkTarget = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
