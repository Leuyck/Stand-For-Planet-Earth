<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation

// Properties
xOrigin = x;                        // Originale position X
yOrigin = y;                        // Originale position Y
npcId = global.npcIdCounter++;      // Identifiant du npc
spd = 5;                            // Vitesse de déplacement standard
spdChase = 10;                      // Vitesse de poursuite
state = "";                         // Etat du npc  
maxHealth = 10;                     // Vie max du npc
currentHealth = maxHealth;          // Vie du npc
sight_range = 800;                  // Distance de détection
attack_range = 400;                 // Distance d'attaque
shot1_bullet_count = 1;             // Nombre de balles
shot1_delay = 5;                    // Cadence de tir
shot1_bullet_type = obj_bullet3;    // Type de balle
precision = 3;                      // Précision de tir
patrolRange = 50;                   // Distance de patrouille
path = path_add();                  // Chemin de patrouille
heroSpotted = false;                // Indique si un héro a été détecté.
amoQuantity = 10;                   // Quantité de munitions avant de recharger
remainingAmoQuantity = 10;          // Quantités restantes de munitions
reloadingTime = 2;                  // Temps de rechargement de l'arme

// alarms
alarm [0] = -1;                     // Walk time
alarm [1] = -1;                     // Patrol waiting time
alarm [2] = 1;                      // Send npc coordinates
alarm [3] = -1;                     // Shot delay
alarm [4] = -1;                     // Relad time

/// create lists
sprites = ds_map_create();
imageSpeeds = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reload Time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shot delay
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send npc position to other players
if(instance_exists(obj_server))
{
    with(obj_player)
    {
        buffer_seek(global.bufferServer, buffer_seek_start, 0);
        buffer_write (global.bufferServer, buffer_u8, C_NPC_MOVE_MESSAGE);
        buffer_write (global.bufferServer, buffer_u32, other.npcId);
        buffer_write (global.bufferServer, buffer_f32, other.x);
        buffer_write (global.bufferServer, buffer_f32, other.y);
        buffer_write (global.bufferServer, buffer_string, object_get_name(other.object_index));
        buffer_write (global.bufferServer, buffer_f32, other.direction);
        buffer_write (global.bufferServer, buffer_u8, other.speed);
        buffer_write(global.bufferServer, buffer_u32, other.sprite_index);
        buffer_write(global.bufferServer, buffer_u8, other.image_index);
        network_send_packet (self.playerSocket, global.bufferServer, buffer_tell(global.bufferServer));
    }
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set alarm waiting time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set alarm walking time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction
speed = spd

if (instance_exists (obj_server))
{
    var targetHero = scr_getTargetHero();
    var behaviour = scr_getNpcBehaviour(id, targetHero);
    switch(behaviour)
    {
        case "patrol":
            src_processPatrol();
            break;
        
        case "chase":
            scr_chaseHero(targetHero);
            break;
        
        case "attack":
            scr_attackHero(targetHero);
            break;
            
        case "waiting":
            path_end();
            break;
    }
    scr_setSpritesNpc();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Hero fire
if(other.owner == "hero")
{
    with (other)
    {
        instance_destroy();
    }

    var bulletDamage = other.damage;
    
    if (instance_exists (obj_server))
    {
        currentHealth -= bulletDamage;
        if (currentHealth == 0) {
            instance_destroy()
        }
    }
    
    with(obj_player)
    {
        buffer_seek(global.bufferServer, buffer_seek_start, 0);
        buffer_write (global.bufferServer, buffer_u8, C_NPC_LIFE_CHANGED_MESSAGE);
        buffer_write (global.bufferServer, buffer_u32, other.npcId);
        buffer_write (global.bufferServer, buffer_u32, other.currentHealth);
        network_send_packet (self.playerSocket, global.bufferServer, buffer_tell(global.bufferServer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var healthSize = self.currentHealth * 100 / self.maxHealth;

draw_self();
if(healthSize != 100) {
    draw_healthbar(x , y, x + 100, y + 15, healthSize, c_black, c_red, c_lime, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
