<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero1_stand</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///initialize some variables

dir = 0;
spd= 10;
hspd = 0;
vspd = 0;
state = "standing";
jumping = false;
fire1 = false;
//fire2 = false;
//fire3 = false;
fric = 1.3;
walkingAcc = 5;
walkingMaxSpd = spd/3;
runningAcc = 5;
runningMaxSpd = spd;
shot1_delay = 5; //Cadence de tir
heal_delay = 1; // Cadence de heal
vari = 3; // précision
bulletDirection1 = 0 //direction de la balle a sa création
bulletDirection2 = 0
bulletDirection3 = 0
bulletDirection4 = 0
bulletDirection5 = 0

alarm [0] = 0;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set playerId if you are the server
if (instance_exists (obj_server))
{
    global.playerId = 1;
}        

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the hero tracker
instance_create (x,y,obj_localPlayer_tracker);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bullet Delay Alarm
alarm[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Lumière
if (instance_exists (obj_engine))
{
    SL_draw_sprite_light(spr_light,0,300,20,1,1,0,c_green,0.8);
}


if (!global.typing)
{
    scr_detectKey();
    scr_fireCheck(obj_localPlayer_server, obj_bullet3);
    //scr_jumpCheck();
    scr_aimHero();
    scr_moveAndCollision();
    scr_standCheck();
    scr_openDoor (obj_door, obj_button, 3, 0.1)
    scr_setSprites();
    
    var spriteNumber = 0
    switch (sprite_index)
    {
        case spr_hero1_stand :
            spriteNumber = 1
        break;
        
        case spr_hero1_move :
            spriteNumber = 2
        break;
        
        case spr_hero1_shot :
            spriteNumber = 3
        break;
        
        case spr_hero1_reload :
            spriteNumber = 4
        break;
        
        case spr_hero1_melee_attack :
            spriteNumber = 5
        break;
        
        case spr_hero2_stand :
            spriteNumber = 6
        break;
        
        case spr_hero2_move :
            spriteNumber = 7
        break;
        
        case spr_hero2_shot :
            spriteNumber = 8
        break;
        
        case spr_hero3_stand :
            spriteNumber = 9
        break;
        
        case spr_hero3_move :
            spriteNumber = 10
        break;
        
        case spr_hero3_shot :
            spriteNumber = 11
        break;
    
    }


    //Tell other players about server's moves
    for (var i = 0; i &lt; ds_list_size (global.players); i++)
    {
        var storedPlayerSocket = ds_list_find_value (global.players, i);
     
        buffer_seek (global.bufferServer , buffer_seek_start, 0);
        buffer_write(global.bufferServer, buffer_u8, 7);
       // buffer_write(global.bufferServer, buffer_string, global.playerPseudo);
        buffer_write(global.bufferServer, buffer_u32, global.playerId);
        buffer_write(global.bufferServer, buffer_f32, x);
        buffer_write(global.bufferServer, buffer_f32, y);
        buffer_write(global.bufferServer, buffer_u8, spriteNumber);
        buffer_write(global.bufferServer, buffer_u8, image_index);
        buffer_write(global.bufferServer, buffer_u16, dir);
        network_send_packet (storedPlayerSocket, global.bufferServer, buffer_tell(global.bufferServer));
    }

// tell other player about server's changes
    for (var i = 0; i &lt; ds_list_size (global.players); i++)
    {
        var storedPlayerSocket = ds_list_find_value (global.players, i);
        
     
        buffer_seek (global.bufferServer , buffer_seek_start, 0);
        buffer_write(global.bufferServer, buffer_u8, 9);
        buffer_write(global.bufferServer, buffer_u32, global.playerId);
        buffer_write(global.bufferServer, buffer_string, global.character);
        buffer_write(global.bufferServer, buffer_string, state);
        buffer_write(global.bufferServer, buffer_u32, shot1_delay);
        buffer_write(global.bufferServer, buffer_u32, bulletDirection1);
        buffer_write(global.bufferServer, buffer_u32, bulletDirection2);
        buffer_write(global.bufferServer, buffer_u32, bulletDirection3);
        buffer_write(global.bufferServer, buffer_u32, bulletDirection4);
        buffer_write(global.bufferServer, buffer_u32, bulletDirection5);
        
        network_send_packet (storedPlayerSocket, global.bufferServer, buffer_tell(global.bufferServer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///leaving the game to the mainMenu
with(obj_server)
{
    network_destroy (server);
    buffer_delete (global.bufferServer);
    ds_list_destroy (global.players);
    instance_destroy()
}

room_goto (rm_mainMenu);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
