<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event of object : obj_server

port = 8000;
server = network_create_server (network_socket_tcp, port, 4);
playerIdCounter = 1;

global.bufferServer = buffer_create (1024, buffer_fixed, 1);
global.playerId = 1
global.npcIdCounter = 0;
global.map = "";
global.playerId = 1
global.character = "";

scr_showNotification("Server is up !")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Async Networking Event of Object : obj_server

var currentSocket = ds_map_find_value (async_load, "id");
 
// Le socket que l'on utilise depuis async_load n'est pas celui du client.
if(!instance_exists(obj_client) || obj_client.socket != currentSocket) {
    
    var type_event = ds_map_find_value (async_load, "type");
    switch (type_event) 
    {
        case network_type_connect :
            var socket = ds_map_find_value (async_load, "socket");
            var pId = playerIdCounter++;
            var playerNumber = scr_getPlayerNumber();
            
            //create the player
            with (instance_create(0, 0, obj_player))
            {
                self.playerIdentifier = pId;
                self.playerName = "";
                self.playerInGame = false;
                self.playerSocket = socket;
                self.playerNumber = playerNumber
            }
            
            // send playerid
            buffer_seek(global.bufferServer, buffer_seek_start, 0);
            buffer_write (global.bufferServer, buffer_u8, 4);
            buffer_write (global.bufferServer, buffer_u32, pId);
            buffer_write (global.bufferServer, buffer_u8, playerNumber);
            network_send_packet (socket, global.bufferServer, buffer_tell(global.bufferServer));
                    
            scr_showNotification ("A new player has connected");
            
        break;
            
        case network_type_disconnect:
            var socket = ds_map_find_value (async_load, "socket");
            var playerLeavingId = 0;
            with (obj_player)
            {
                if (playerSocket == socket)
                {
                    playerLeavingId = playerIdentifier;
                }
            }
            with (obj_player)
            {
                if (self.playerIdentifier == playerLeavingId)
                {
                    instance_destroy();
                }
                else
                {
                    buffer_seek(global.bufferServer, buffer_seek_start, 0);
                    buffer_write (global.bufferServer, buffer_u8, 5);
                    buffer_write (global.bufferServer, buffer_u32, playerLeavingId);
                    network_send_packet (playerSocket, global.bufferServer, buffer_tell(global.bufferServer));
                }
            }
            with (obj_remotePlayer)
            {
                if (remotePlayerId == playerLeavingId)
                {
                    instance_destroy();
                }
            }
            with (obj_btn_scrollHero_remote)
            {
                if (remoteButtonId == playerLeavingId)
                {
                    instance_destroy();
                }
            }
            
            scr_showNotification ("A player has left !"); 
            
        break;
        
        case network_type_data:
            var socket = ds_map_find_value (async_load, "id");
            var buffer = ds_map_find_value (async_load, "buffer");
            buffer_seek (buffer, buffer_seek_start, 0);
            scr_receivedPacket_server (buffer, socket);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy (server);
buffer_delete (global.bufferServer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server status
draw_set_colour (c_white);
draw_set_font (fnt_1);
draw_set_valign (fa_middle);
draw_set_halign (fa_left);
draw_text( 5, 10, "Server Status: "+ string( server &gt;= 0 ) ); 
draw_text( 5, 25, "Total Clients: "+ string( instance_number(obj_client) ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
