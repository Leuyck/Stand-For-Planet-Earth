<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create event of object : obj_server

var networkType = network_socket_tcp;
var port = 8000;
var maxClients = 4;


var bufferSize = 1024;
var bufferType = buffer_fixed;
var bufferAlignment = 1;

server = network_create_server (networkType, port, maxClients);
global.bufferServer = buffer_create (bufferSize,bufferType,bufferAlignment);

global.players = ds_list_create();

playerIdCounter = 1;
global.playerId = 1

global.npcIdCounter = 0;
//show_debug_message ("initialisation");

global.typing = false;
maxWidth = 300;
blink = false;

global.textServer= "";

global.map = "";

global.playerId = 1






scr_showNotification("Server is up !")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Async Networking Event of Object : obj_server

var type_event = ds_map_find_value (async_load, "type");
switch (type_event) 
{

    case network_type_connect :
        var socket = ds_map_find_value (async_load, "socket");
        
        playerIdCounter++;
        var pId = playerIdCounter
        //create the player
        with (instance_create(0, 0, obj_player))
        {
             playerIdentifier = pId;
             playerName = "";
             playerInGame = false;
             playerSocket = socket;
        }
        ds_list_add(global.players, socket);
        
        // send playerid
        buffer_seek(global.bufferServer, buffer_seek_start, 0);
        buffer_write (global.bufferServer, buffer_u8, 4);
        buffer_write (global.bufferServer, buffer_u32, playerIdCounter);
        network_send_packet (socket, global.bufferServer, buffer_tell(global.bufferServer));
        
        //send server's playerid
        buffer_seek (global.bufferServer , buffer_seek_start, 0);
        buffer_write(global.bufferServer, buffer_u8, 6);
        buffer_write(global.bufferServer, buffer_string, global.playerPseudo);
        buffer_write(global.bufferServer, buffer_u32, global.playerId);
        network_send_packet (socket, global.bufferServer, buffer_tell(global.bufferServer));
                
        scr_showNotification ("A new player has connected");
        
    break;
        
    case network_type_disconnect:
        var socket = ds_map_find_value (async_load, "socket");
        var index = ds_list_find_index (global.players, socket);
        if (index != -1)
        {
            ds_list_delete (global.players, index);
        }

        //get some info about this player leaving
        var playerLeavingId = 0;
        
        with (obj_player)
        {
            if (playerSocket == socket)
            {
                playerLeavingId = playerIdentifier;
            }
        }
        
        // notify all players
        for (var i = 0; i &lt; ds_list_size(global.players); i++)
        {
            var storedPlayerSocket = ds_list_find_value (global.players, i);
            
            buffer_seek(global.bufferServer, buffer_seek_start, 0);
            buffer_write (global.bufferServer, buffer_u8, 5);
            buffer_write (global.bufferServer, buffer_u32, playerLeavingId);
            network_send_packet (socket, global.bufferServer, buffer_tell(global.bufferServer));
        }
        
        with (obj_player)
        {
            if (playerIdentifier == playerLeavingId)
            {
                instance_destroy();
            }
        }
        with (obj_remotePlayer_server)
        {
            if (remotePlayerId == playerLeavingId)
            {
                instance_destroy();
            }        
        }
        scr_showNotification ("A player has left !"); 
        
    break;
    
    case network_type_data:
        var buffer = ds_map_find_value (async_load, "buffer");
        var socket = ds_map_find_value (async_load,"id");
        buffer_seek (buffer, buffer_seek_start, 0);
        scr_receivedPacket_server (buffer, socket);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy (server);
buffer_delete (global.bufferServer);
ds_list_destroy (global.players);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server status
draw_set_colour (c_white);
draw_set_font (fnt_1);
draw_set_valign (fa_middle);
draw_set_halign (fa_left);
draw_text( 5, 10, "Server Status: "+ string( server &gt;= 0 ) ); 
draw_text( 5, 25, "Total Clients: "+ string( ds_list_size(global.players) ) );



/*var xx = room_width/2
var yy = 150

with(obj_player)
{
    draw_text (xx, yy, playerIdentifier);
    draw_text (xx, yy + 20, playerName);
    draw_text (xx, yy + 40, playerInGame);
}

yy += 60
*/

//draw text chat
if(room == rm_world1)
{
    draw_set_halign (fa_right);
    draw_set_font (fnt_3);
    
    if (global.typing) 
    {
        if (!blink)
        {
        draw_text (view_hview[1]/2, view_wview[1]/3, "You : " + global.textServer);
        }
        else
        {
            draw_text (view_hview[1]/2, view_wview[1]/3, "You : " + global.textServer + "|");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create NPC on demand
/*

randomize();
var npc = instance_create(x, y, obj_npc);
npc.xx = irandom_range (0 + 100, 1920 - 100);
npc.yy = 200;
npc.npcId = npcIdCounter;
npc.npcType = irandom(2);
npc.dir = irandom(359);
npc.spd = 0
npcIdCounter++

//notify players about this new NPC

for (var i = 0 ; i &lt; ds_list_size(global.players);  i++)
{
    var storedPlayerSocket = ds_list_find_value (global.players, i);
    
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write (global.buffer, buffer_u8, 10);
    buffer_write (global.buffer, buffer_u32, npc.npcId);
    buffer_write (global.buffer, buffer_f32, npc.xx);
    buffer_write (global.buffer, buffer_f32, npc.yy);
    buffer_write (global.buffer, buffer_u8, npc.npcType);
    buffer_write (global.buffer, buffer_u16, npc.dir);
    buffer_write (global.buffer, buffer_u8, npc.spd);
    network_send_packet (storedPlayerSocket, global.buffer, buffer_tell(global.buffer));

    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rm_world2)
{
    if (global.typing)
    {
        if (global.textServer != "")
        {
            for (var i = 0; i &lt; ds_list_size (global.players); i++)
            {
                var storedPlayerSocket = ds_list_find_value (global.players, i);
                //send our message
                buffer_seek (global.bufferServer, buffer_seek_start, 0);
                buffer_write (global.bufferServer, buffer_u8, 8);
                buffer_write (global.bufferServer, buffer_u32, global.playerId);    
                buffer_write (global.bufferServer, buffer_string, global.textServer);
                network_send_packet (storedPlayerSocket, global.bufferServer, buffer_tell(global.bufferServer));
            }
            
            global.typing = false;
            
            var chat = instance_create (x, y , obj_chat);
            chat.text = global.textServer;
            chat.owner = obj_localPlayer_server.id;
            
            global.textServer = "";
        }
    }
    else
    {
        keyboard_string = global.textServer;
        global.typing = true;
        alarm[0] = room_speed * 1 ;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.typing)
{
    if (string_width (keyboard_string) &lt; maxWidth)
    {
        global.textServer = keyboard_string;
    }
    else
    {
        keyboard_string = global.textServer;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
